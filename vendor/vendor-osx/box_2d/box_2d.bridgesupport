<?xml version='1.0'?>
<signatures version='1.0'>
<struct type='{B2DAABB=&quot;lowerBound&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;upperBound&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}' type64='{B2DAABB=&quot;lowerBound&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;upperBound&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}}' name='B2DAABB'>
<field type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' name='lowerBound' declared_type='CGPoint'/>
<field type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' name='upperBound' declared_type='CGPoint'/>
</struct>
<struct type='{B2DBodyDef=&quot;type&quot;i&quot;position&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;angle&quot;f&quot;linearVelocity&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;angularVelocity&quot;f&quot;linearDamping&quot;f&quot;angularDamping&quot;f&quot;allowSleep&quot;B&quot;awake&quot;B&quot;fixedRotation&quot;B&quot;bullet&quot;B&quot;active&quot;B&quot;gravityScale&quot;f}' type64='{B2DBodyDef=&quot;type&quot;i&quot;position&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;angle&quot;d&quot;linearVelocity&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;angularVelocity&quot;d&quot;linearDamping&quot;d&quot;angularDamping&quot;d&quot;allowSleep&quot;B&quot;awake&quot;B&quot;fixedRotation&quot;B&quot;bullet&quot;B&quot;active&quot;B&quot;gravityScale&quot;d}' name='B2DBodyDef'>
<field type='i' name='type' declared_type='B2DBodyTypes'/>
<field type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' name='position' declared_type='CGPoint'/>
<field type='f' type64='d' name='angle' declared_type='CGFloat'/>
<field type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' name='linearVelocity' declared_type='CGPoint'/>
<field type='f' type64='d' name='angularVelocity' declared_type='CGFloat'/>
<field type='f' type64='d' name='linearDamping' declared_type='CGFloat'/>
<field type='f' type64='d' name='angularDamping' declared_type='CGFloat'/>
<field type='B' name='allowSleep' declared_type='_Bool'/>
<field type='B' name='awake' declared_type='_Bool'/>
<field type='B' name='fixedRotation' declared_type='_Bool'/>
<field type='B' name='bullet' declared_type='_Bool'/>
<field type='B' name='active' declared_type='_Bool'/>
<field type='f' type64='d' name='gravityScale' declared_type='CGFloat'/>
</struct>
<struct type='{B2DColor=&quot;red&quot;f&quot;green&quot;f&quot;blue&quot;f}' type64='{B2DColor=&quot;red&quot;d&quot;green&quot;d&quot;blue&quot;d}' name='B2DColor'>
<field type='f' type64='d' name='red' declared_type='CGFloat'/>
<field type='f' type64='d' name='green' declared_type='CGFloat'/>
<field type='f' type64='d' name='blue' declared_type='CGFloat'/>
</struct>
<struct type='{B2DFilter=&quot;categoryBits&quot;I&quot;maskBits&quot;I&quot;groupIndex&quot;i}' type64='{B2DFilter=&quot;categoryBits&quot;Q&quot;maskBits&quot;Q&quot;groupIndex&quot;q}' name='B2DFilter'>
<field type='I' type64='Q' name='categoryBits' declared_type='NSUInteger'/>
<field type='I' type64='Q' name='maskBits' declared_type='NSUInteger'/>
<field type='i' type64='q' name='groupIndex' declared_type='NSInteger'/>
</struct>
<struct type64='{B2DFixtureDef=&quot;shape&quot;@&quot;userData&quot;@&quot;friction&quot;d&quot;restitution&quot;d&quot;density&quot;d&quot;isSensor&quot;B}' name='B2DFixtureDef' type='{B2DFixtureDef=&quot;shape&quot;@&quot;userData&quot;@&quot;friction&quot;f&quot;restitution&quot;f&quot;density&quot;f&quot;isSensor&quot;B}'>
<field name='shape' declared_type='B2DShape*' type='@'/>
<field name='userData' declared_type='id' type='@'/>
<field type64='d' name='friction' declared_type='CGFloat' type='f'/>
<field type64='d' name='restitution' declared_type='CGFloat' type='f'/>
<field type64='d' name='density' declared_type='CGFloat' type='f'/>
<field name='isSensor' declared_type='_Bool' type='B'/>
</struct>
<struct type='{B2DMassData=&quot;mass&quot;f&quot;center&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;rotationalInertia&quot;f}' type64='{B2DMassData=&quot;mass&quot;d&quot;center&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;rotationalInertia&quot;d}' name='B2DMassData'>
<field type='f' type64='d' name='mass' declared_type='CGFloat'/>
<field type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' name='center' declared_type='CGPoint'/>
<field type='f' type64='d' name='rotationalInertia' declared_type='CGFloat'/>
</struct>
<struct type='{B2DProfile=&quot;step&quot;f&quot;collide&quot;f&quot;solve&quot;f&quot;solveInit&quot;f&quot;solveVelocity&quot;f&quot;solvePosition&quot;f&quot;broadphase&quot;f&quot;solveTOI&quot;f}' type64='{B2DProfile=&quot;step&quot;d&quot;collide&quot;d&quot;solve&quot;d&quot;solveInit&quot;d&quot;solveVelocity&quot;d&quot;solvePosition&quot;d&quot;broadphase&quot;d&quot;solveTOI&quot;d}' name='B2DProfile'>
<field type='f' type64='d' name='step' declared_type='CGFloat'/>
<field type='f' type64='d' name='collide' declared_type='CGFloat'/>
<field type='f' type64='d' name='solve' declared_type='CGFloat'/>
<field type='f' type64='d' name='solveInit' declared_type='CGFloat'/>
<field type='f' type64='d' name='solveVelocity' declared_type='CGFloat'/>
<field type='f' type64='d' name='solvePosition' declared_type='CGFloat'/>
<field type='f' type64='d' name='broadphase' declared_type='CGFloat'/>
<field type='f' type64='d' name='solveTOI' declared_type='CGFloat'/>
</struct>
<struct type='{B2DRayCastInput=&quot;point1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;point2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;maxFraction&quot;f}' type64='{B2DRayCastInput=&quot;point1&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;point2&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;maxFraction&quot;d}' name='B2DRayCastInput'>
<field type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' name='point1' declared_type='CGPoint'/>
<field type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' name='point2' declared_type='CGPoint'/>
<field type='f' type64='d' name='maxFraction' declared_type='CGFloat'/>
</struct>
<struct type='{B2DRayCastOutput=&quot;normal&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;fraction&quot;f}' type64='{B2DRayCastOutput=&quot;normal&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;fraction&quot;d}' name='B2DRayCastOutput'>
<field type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' name='normal' declared_type='CGPoint'/>
<field type='f' type64='d' name='fraction' declared_type='CGFloat'/>
</struct>
<struct type='{B2DTransform=&quot;position&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;angle&quot;f}' type64='{B2DTransform=&quot;position&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;angle&quot;d}' name='B2DTransform'>
<field type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' name='position' declared_type='CGPoint'/>
<field type='f' type64='d' name='angle' declared_type='CGFloat'/>
</struct>
<enum value='3' name='kChainShapeType'/>
<enum value='0' name='kCircleShapeType'/>
<enum value='2' name='kDynamicBodyType'/>
<enum value='1' name='kEdgeShapeType'/>
<enum value='1' name='kKinematicBodyType'/>
<enum value='2' name='kPolygonShapeType'/>
<enum value='0' name='kStaticBodyType'/>
<enum value='4' name='kTypeCountShapeType'/>
<function name='B2DAABBMake'>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' name='lowerBound' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' name='upperBound' declared_type='CGPoint'/>
<retval type='{B2DAABB={CGPoint=ff}{CGPoint=ff}}' type64='{B2DAABB={CGPoint=dd}{CGPoint=dd}}' declared_type='B2DAABB'/>
</function>
<function name='B2DBodyDefMake'>
<retval type='{B2DBodyDef=i{CGPoint=ff}f{CGPoint=ff}fffBBBBBf}' type64='{B2DBodyDef=i{CGPoint=dd}d{CGPoint=dd}dddBBBBBd}' declared_type='B2DBodyDef'/>
</function>
<function name='B2DColorMake'>
<arg type='f' type64='d' name='red' declared_type='CGFloat'/>
<arg type='f' type64='d' name='green' declared_type='CGFloat'/>
<arg type='f' type64='d' name='blue' declared_type='CGFloat'/>
<retval type='{B2DColor=fff}' type64='{B2DColor=ddd}' declared_type='B2DColor'/>
</function>
<function name='B2DFilterMake'>
<arg type='I' type64='Q' name='categoryBits' declared_type='NSUInteger'/>
<arg type='I' type64='Q' name='maskBits' declared_type='NSUInteger'/>
<arg type='i' type64='q' name='groupIndex' declared_type='NSInteger'/>
<retval type='{B2DFilter=IIi}' type64='{B2DFilter=QQq}' declared_type='B2DFilter'/>
</function>
<function name='B2DFixtureDefMake'>
<retval type='{B2DFixtureDef=@@fffB}' type64='{B2DFixtureDef=@@dddB}' declared_type='B2DFixtureDef'/>
</function>
<function name='B2DMassDataMake'>
<arg type='f' type64='d' name='mass' declared_type='CGFloat'/>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' name='center' declared_type='CGPoint'/>
<arg type='f' type64='d' name='rotationalInertia' declared_type='CGFloat'/>
<retval type='{B2DMassData=f{CGPoint=ff}f}' type64='{B2DMassData=d{CGPoint=dd}d}' declared_type='B2DMassData'/>
</function>
<function name='B2DProfileMake'>
<arg type='f' type64='d' name='step' declared_type='CGFloat'/>
<arg type='f' type64='d' name='collide' declared_type='CGFloat'/>
<arg type='f' type64='d' name='solve' declared_type='CGFloat'/>
<arg type='f' type64='d' name='solveInit' declared_type='CGFloat'/>
<arg type='f' type64='d' name='solveVelocity' declared_type='CGFloat'/>
<arg type='f' type64='d' name='solvePosition' declared_type='CGFloat'/>
<arg type='f' type64='d' name='broadphase' declared_type='CGFloat'/>
<arg type='f' type64='d' name='solveTOI' declared_type='CGFloat'/>
<retval type='{B2DProfile=ffffffff}' type64='{B2DProfile=dddddddd}' declared_type='B2DProfile'/>
</function>
<function name='B2DRayCastInputMake'>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' name='point1' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' name='point2' declared_type='CGPoint'/>
<arg type='f' type64='d' name='maxFraction' declared_type='CGFloat'/>
<retval type='{B2DRayCastInput={CGPoint=ff}{CGPoint=ff}f}' type64='{B2DRayCastInput={CGPoint=dd}{CGPoint=dd}d}' declared_type='B2DRayCastInput'/>
</function>
<function name='B2DRayCastOutputMake'>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' name='normal' declared_type='CGPoint'/>
<arg type='f' type64='d' name='fraction' declared_type='CGFloat'/>
<retval type='{B2DRayCastOutput={CGPoint=ff}f}' type64='{B2DRayCastOutput={CGPoint=dd}d}' declared_type='B2DRayCastOutput'/>
</function>
<function name='B2DTransformMake'>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' name='position' declared_type='CGPoint'/>
<arg type='f' type64='d' name='angle' declared_type='CGFloat'/>
<retval type='{B2DTransform={CGPoint=ff}f}' type64='{B2DTransform={CGPoint=dd}d}' declared_type='B2DTransform'/>
</function>
<class name='B2DBody'>
<method selector='addFixtureForShape:friction:restitution:density:isSensor:'>
<arg index='0' type='@' name='shape' declared_type='B2DShape*'/>
<arg index='1' type='f' type64='d' name='friction' declared_type='CGFloat'/>
<arg index='2' type='f' type64='d' name='restitution' declared_type='CGFloat'/>
<arg index='3' type='f' type64='d' name='density' declared_type='CGFloat'/>
<arg index='4' type='B' name='isSensor' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='angle'>
<retval type='f' type64='d' declared_type='CGFloat'/>
</method>
<method selector='angularDamping'>
<retval type='f' type64='d' declared_type='CGFloat'/>
</method>
<method selector='angularVelocity'>
<retval type='f' type64='d' declared_type='CGFloat'/>
</method>
<method selector='applyAngularImpulse:'>
<arg index='0' type='f' type64='d' name='impulse' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='applyForce:atLocation:asImpulse:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='force' declared_type='CGPoint'/>
<arg index='1' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='location' declared_type='CGPoint'/>
<arg index='2' type='B' name='asImpulse' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='applyForce:atPoint:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='force' declared_type='CGPoint'/>
<arg index='1' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='point' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='applyForceToCenter:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='force' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='applyLinearImpulse:atPoint:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='impulse' declared_type='CGPoint'/>
<arg index='1' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='point' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='applyTorque:'>
<arg index='0' type='f' type64='d' name='torque' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='applyTorque:asImpulse:'>
<arg index='0' type='f' type64='d' name='torque' declared_type='CGFloat'/>
<arg index='1' type='B' name='impulse' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='awake'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='body'>
<retval type='^i' declared_type='int*'/>
</method>
<method selector='bullet'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='center'>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='createFixture:'>
<arg index='0' type='{B2DFixtureDef=@@fffB}' type64='{B2DFixtureDef=@@dddB}' name='fixtureDefinition' declared_type='B2DFixtureDef'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='createFixtureWithShape:andDensity:'>
<arg index='0' type='@' name='shape' declared_type='B2DShape*'/>
<arg index='1' type='f' type64='d' name='density' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='destroyFixture:'>
<arg index='0' type='@' name='fixture' declared_type='B2DFixture*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='dump'>
<retval type='v' declared_type='void'/>
</method>
<method selector='fixedRotation'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='fixtureList'>
<retval type='@' declared_type='NSArray*'/>
</method>
<method selector='gravityScale'>
<retval type='f' type64='d' declared_type='CGFloat'/>
</method>
<method selector='inertia'>
<retval type='f' type64='d' declared_type='CGFloat'/>
</method>
<method selector='initWithBody:'>
<arg index='0' type='@' name='boxBody' declared_type='id'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='isActive'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='isAwake'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='isBullet'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='isEqualToBody:'>
<arg index='0' type='@' name='aBody' declared_type='B2DBody*'/>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='isFixedRotation'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='isSleepingAllowed'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='linearDamping'>
<retval type='f' type64='d' declared_type='CGFloat'/>
</method>
<method selector='linearVelocity'>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='linearVelocityFromLocalPoint:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='localPoint' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='linearVelocityFromWorldPoint:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='worldPoint' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='localCenter'>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='localPoint:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='worldPoint' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='localVector:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='worldVector' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='mass'>
<retval type='f' type64='d' declared_type='CGFloat'/>
</method>
<method selector='massData'>
<retval type='{B2DMassData=f{CGPoint=ff}f}' type64='{B2DMassData=d{CGPoint=dd}d}' declared_type='B2DMassData'/>
</method>
<method selector='next'>
<retval type='@' declared_type='B2DBody*'/>
</method>
<method selector='position'>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='resetMassData'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAngularDamping:'>
<arg index='0' type='f' type64='d' name='angularDamping' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAngularVelocity:'>
<arg index='0' type='f' type64='d' name='angularVelocity' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAwake:'>
<arg index='0' type='B' name='awake' declared_type='_Bool'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBody:'>
<arg index='0' type='^i' name='body' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBullet:'>
<arg index='0' type='B' name='bullet' declared_type='_Bool'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFixedRotation:'>
<arg index='0' type='B' name='fixedRotation' declared_type='_Bool'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setGravityScale:'>
<arg index='0' type='f' type64='d' name='gravityScale' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setLinearDamping:'>
<arg index='0' type='f' type64='d' name='linearDamping' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setLinearVelocity:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='linearVelocity' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMassData:'>
<arg index='0' type='{B2DMassData=f{CGPoint=ff}f}' type64='{B2DMassData=d{CGPoint=dd}d}' name='massData' declared_type='B2DMassData'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPosition:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='position' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSleepingAllowed:'>
<arg index='0' type='B' name='sleepingAllowed' declared_type='_Bool'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTransformWithPosition:andAngle:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='position' declared_type='CGPoint'/>
<arg index='1' type='f' type64='d' name='angle' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setType:'>
<arg index='0' type='i' name='type' declared_type='B2DBodyTypes'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setUserData:'>
<arg index='0' type='@' name='userData' declared_type='id'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sleepingAllowed'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='transform'>
<retval type='{B2DTransform={CGPoint=ff}f}' type64='{B2DTransform={CGPoint=dd}d}' declared_type='B2DTransform'/>
</method>
<method selector='type'>
<retval type='i' declared_type='B2DBodyTypes'/>
</method>
<method selector='userData'>
<retval type='@' declared_type='id'/>
</method>
<method selector='worldCenter'>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='worldPoint:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='localPoint' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='worldVector:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='localVector' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
</class>
<class name='B2DChainShape'>
<method selector='createChainWithVertices:andVertexCount:'>
<arg index='0' type='^{CGPoint=ff}' type64='^{CGPoint=dd}' name='vertices' declared_type='CGPoint*'/>
<arg index='1' type='i' type64='q' name='vertexCount' declared_type='NSInteger'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='createLoopWithVertices:andVertexCount:'>
<arg index='0' type='^{CGPoint=ff}' type64='^{CGPoint=dd}' name='vertices' declared_type='CGPoint*'/>
<arg index='1' type='i' type64='q' name='vertexCount' declared_type='NSInteger'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='getChildEdge:withIndex:'>
<arg index='0' type='@' name='edgeShape' declared_type='B2DEdgeShape*'/>
<arg index='1' type='i' type64='q' name='index' declared_type='NSInteger'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='hasNextVertex'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='hasPreviousVertex'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='nextVertex'>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='previousVertex'>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='setNextVertex:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='vertex' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPreviousVertex:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='vertex' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='vertexCount'>
<retval type='i' type64='q' declared_type='NSInteger'/>
</method>
<method selector='vertices'>
<retval type='^{CGPoint=ff}' type64='^{CGPoint=dd}' declared_type='CGPoint*'/>
</method>
</class>
<class name='B2DCircleShape'>
<method selector='getSupport:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='direction' declared_type='CGPoint'/>
<retval type='i' type64='q' declared_type='NSInteger'/>
</method>
<method selector='getSupportVertex:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='direction' declared_type='CGPoint'/>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='getVertex:'>
<arg index='0' type='i' type64='q' name='index' declared_type='NSInteger'/>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='initWithRadius:'>
<arg index='0' type='f' type64='d' name='radius' declared_type='CGFloat'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='position'>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='vertexCount'>
<retval type='i' type64='q' declared_type='NSInteger'/>
</method>
</class>
<class name='B2DContactFilter'>
<method selector='contactFilter'>
<retval type='^i' declared_type='int*'/>
</method>
<method selector='setContactFilter:'>
<arg index='0' type='^i' name='contactFilter' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setShouldCollide:'>
<arg index='0' type='@?' function_pointer='true' name='shouldCollide' declared_type='shouldCollideCallback'>
<arg type='@' declared_type='B2DFixture*'/>
<arg type='@' declared_type='B2DFixture*'/>
<retval type='B' declared_type='_Bool'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='shouldCollide'>
<retval type='@?' function_pointer='true' declared_type='shouldCollideCallback'>
<arg type='@' declared_type='B2DFixture*'/>
<arg type='@' declared_type='B2DFixture*'/>
<retval type='B' declared_type='_Bool'/>
</retval>
</method>
</class>
<class name='B2DContactListener'>
<method selector='beginContact'>
<retval type='@?' function_pointer='true' declared_type='beginContactCallback'>
<arg type='@' declared_type='B2DBody*'/>
<arg type='@' declared_type='B2DBody*'/>
<arg type='B' declared_type='_Bool'/>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='contactListener'>
<retval type='^i' declared_type='int*'/>
</method>
<method selector='endContact'>
<retval type='@?' function_pointer='true' declared_type='endContactCallback'>
<arg type='@' declared_type='B2DBody*'/>
<arg type='@' declared_type='B2DBody*'/>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='setBeginContact:'>
<arg index='0' type='@?' function_pointer='true' name='beginContact' declared_type='beginContactCallback'>
<arg type='@' declared_type='B2DBody*'/>
<arg type='@' declared_type='B2DBody*'/>
<arg type='B' declared_type='_Bool'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setContactListener:'>
<arg index='0' type='^i' name='contactListener' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEndContact:'>
<arg index='0' type='@?' function_pointer='true' name='endContact' declared_type='endContactCallback'>
<arg type='@' declared_type='B2DBody*'/>
<arg type='@' declared_type='B2DBody*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='B2DDestructionListener'>
<method selector='destructionListener'>
<retval type='^i' declared_type='int*'/>
</method>
<method selector='fixtureSayGoodbye'>
<retval type='@?' function_pointer='true' declared_type='fixtureSayGoodbyeCallback'>
<arg type='@' declared_type='B2DFixture*'/>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='setDestructionListener:'>
<arg index='0' type='^i' name='destructionListener' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFixtureSayGoodbye:'>
<arg index='0' type='@?' function_pointer='true' name='fixtureSayGoodbye' declared_type='fixtureSayGoodbyeCallback'>
<arg type='@' declared_type='B2DFixture*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='B2DDraw'>
<method selector='draw'>
<retval type='^i' declared_type='int*'/>
</method>
<method selector='drawCircle'>
<retval type='@?' function_pointer='true' declared_type='drawCircleCallback'>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
<arg type='f' declared_type='float'/>
<arg type='{B2DColor=fff}' type64='{B2DColor=ddd}' declared_type='B2DColor'/>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='drawPolygon'>
<retval type='@?' function_pointer='true' declared_type='drawPolygonCallback'>
<arg type='^{CGPoint=ff}' type64='^{CGPoint=dd}' declared_type='CGPoint*'/>
<arg type='i' type64='q' declared_type='NSInteger'/>
<arg type='{B2DColor=fff}' type64='{B2DColor=ddd}' declared_type='B2DColor'/>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='drawSegment'>
<retval type='@?' function_pointer='true' declared_type='drawSegmentCallback'>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
<arg type='{B2DColor=fff}' type64='{B2DColor=ddd}' declared_type='B2DColor'/>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='drawSolidCircle'>
<retval type='@?' function_pointer='true' declared_type='drawSolidCircleCallback'>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
<arg type='f' declared_type='float'/>
<arg type='{B2DColor=fff}' type64='{B2DColor=ddd}' declared_type='B2DColor'/>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='drawSolidPolygon'>
<retval type='@?' function_pointer='true' declared_type='drawSolidPolygonCallback'>
<arg type='^{CGPoint=ff}' type64='^{CGPoint=dd}' declared_type='CGPoint*'/>
<arg type='i' type64='q' declared_type='NSInteger'/>
<arg type='{B2DColor=fff}' type64='{B2DColor=ddd}' declared_type='B2DColor'/>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='drawTransform'>
<retval type='@?' function_pointer='true' declared_type='drawTransformCallback'>
<arg type='{B2DTransform={CGPoint=ff}f}' type64='{B2DTransform={CGPoint=dd}d}' declared_type='B2DTransform'/>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='setDraw:'>
<arg index='0' type='^i' name='draw' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDrawCircle:'>
<arg index='0' type='@?' function_pointer='true' name='drawCircle' declared_type='drawCircleCallback'>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
<arg type='f' declared_type='float'/>
<arg type='{B2DColor=fff}' type64='{B2DColor=ddd}' declared_type='B2DColor'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDrawPolygon:'>
<arg index='0' type='@?' function_pointer='true' name='drawPolygon' declared_type='drawPolygonCallback'>
<arg type='^{CGPoint=ff}' type64='^{CGPoint=dd}' declared_type='CGPoint*'/>
<arg type='i' type64='q' declared_type='NSInteger'/>
<arg type='{B2DColor=fff}' type64='{B2DColor=ddd}' declared_type='B2DColor'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDrawSegment:'>
<arg index='0' type='@?' function_pointer='true' name='drawSegment' declared_type='drawSegmentCallback'>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
<arg type='{B2DColor=fff}' type64='{B2DColor=ddd}' declared_type='B2DColor'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDrawSolidCircle:'>
<arg index='0' type='@?' function_pointer='true' name='drawSolidCircle' declared_type='drawSolidCircleCallback'>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
<arg type='f' declared_type='float'/>
<arg type='{B2DColor=fff}' type64='{B2DColor=ddd}' declared_type='B2DColor'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDrawSolidPolygon:'>
<arg index='0' type='@?' function_pointer='true' name='drawSolidPolygon' declared_type='drawSolidPolygonCallback'>
<arg type='^{CGPoint=ff}' type64='^{CGPoint=dd}' declared_type='CGPoint*'/>
<arg type='i' type64='q' declared_type='NSInteger'/>
<arg type='{B2DColor=fff}' type64='{B2DColor=ddd}' declared_type='B2DColor'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDrawTransform:'>
<arg index='0' type='@?' function_pointer='true' name='drawTransform' declared_type='drawTransformCallback'>
<arg type='{B2DTransform={CGPoint=ff}f}' type64='{B2DTransform={CGPoint=dd}d}' declared_type='B2DTransform'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='B2DEdgeShape'>
<method selector='endAdjacentVertex'>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='endVertex'>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='hasEndAdjacentVertex'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='hasStartAdjacentVertex'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='initWithStartPoint:endPoint:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='startPoint' declared_type='CGPoint'/>
<arg index='1' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='endPoint' declared_type='CGPoint'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithStartVertex:endVertex:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='startVertex' declared_type='CGPoint'/>
<arg index='1' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='endVertex' declared_type='CGPoint'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='startAdjacentVertex'>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='startVertex'>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
</class>
<class name='B2DFixture'>
<method selector='aabb:'>
<arg index='0' type='i' type64='q' name='childIndex' declared_type='NSInteger'/>
<retval type='{B2DAABB={CGPoint=ff}{CGPoint=ff}}' type64='{B2DAABB={CGPoint=dd}{CGPoint=dd}}' declared_type='B2DAABB'/>
</method>
<method selector='body'>
<retval type='@' declared_type='B2DBody*'/>
</method>
<method selector='density'>
<retval type='f' type64='d' declared_type='CGFloat'/>
</method>
<method selector='dump:'>
<arg index='0' type='i' type64='q' name='bodyIndex' declared_type='NSInteger'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='filterData'>
<retval type='{B2DFilter=IIi}' type64='{B2DFilter=QQq}' declared_type='B2DFilter'/>
</method>
<method selector='fixture'>
<retval type='^i' declared_type='int*'/>
</method>
<method selector='friction'>
<retval type='f' type64='d' declared_type='CGFloat'/>
</method>
<method selector='initWithFixture:'>
<arg index='0' type='@' name='boxFixture' declared_type='id'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='isSensor'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='massData'>
<retval type='{B2DMassData=f{CGPoint=ff}f}' type64='{B2DMassData=d{CGPoint=dd}d}' declared_type='B2DMassData'/>
</method>
<method selector='next'>
<retval type='@' declared_type='B2DFixture*'/>
</method>
<method selector='rayCastWithOutput:input:andChildIndex:'>
<arg index='0' type='^{B2DRayCastOutput={CGPoint=ff}f}' type64='^{B2DRayCastOutput={CGPoint=dd}d}' name='output' declared_type='B2DRayCastOutput*'/>
<arg index='1' type='{B2DRayCastInput={CGPoint=ff}{CGPoint=ff}f}' type64='{B2DRayCastInput={CGPoint=dd}{CGPoint=dd}d}' name='input' declared_type='B2DRayCastInput'/>
<arg index='2' type='i' type64='q' name='childIndex' declared_type='NSInteger'/>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='refilter'>
<retval type='v' declared_type='void'/>
</method>
<method selector='restitution'>
<retval type='f' type64='d' declared_type='CGFloat'/>
</method>
<method selector='sensor'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='setDensity:'>
<arg index='0' type='f' type64='d' name='density' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFilterData:'>
<arg index='0' type='{B2DFilter=IIi}' type64='{B2DFilter=QQq}' name='filterData' declared_type='B2DFilter'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFixture:'>
<arg index='0' type='^i' name='fixture' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFriction:'>
<arg index='0' type='f' type64='d' name='friction' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRestitution:'>
<arg index='0' type='f' type64='d' name='restitution' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSensor:'>
<arg index='0' type='B' name='sensor' declared_type='_Bool'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setUserData:'>
<arg index='0' type='@' name='userData' declared_type='id'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='shape'>
<retval type='@' declared_type='B2DShape*'/>
</method>
<method selector='testPoint:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='point' declared_type='CGPoint'/>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='type'>
<retval type='i' declared_type='B2DShapeTypes'/>
</method>
<method selector='userData'>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='B2DPolygonShape'>
<method selector='centroid'>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='getVertex:'>
<arg index='0' type='i' type64='q' name='index' declared_type='NSInteger'/>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='initWithBoxSize:'>
<arg index='0' type='{CGSize=ff}' type64='{CGSize=dd}' name='boxSize' declared_type='CGSize'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithHalfWidth:andHalfHeight:'>
<arg index='0' type='f' type64='d' name='halfWidth' declared_type='CGFloat'/>
<arg index='1' type='f' type64='d' name='halfHeight' declared_type='CGFloat'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithHalfWidth:halfHeight:center:andAngle:'>
<arg index='0' type='f' type64='d' name='halfWidth' declared_type='CGFloat'/>
<arg index='1' type='f' type64='d' name='halfHeight' declared_type='CGFloat'/>
<arg index='2' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='center' declared_type='CGPoint'/>
<arg index='3' type='f' type64='d' name='angle' declared_type='CGFloat'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithVertices:andVertexCount:'>
<arg index='0' type='^{CGPoint=ff}' type64='^{CGPoint=dd}' name='vertices' declared_type='CGPoint*'/>
<arg index='1' type='i' type64='q' name='vertexCount' declared_type='NSInteger'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='normals'>
<retval type='^{CGPoint=ff}' type64='^{CGPoint=dd}' declared_type='CGPoint*'/>
</method>
<method selector='vertexCount'>
<retval type='i' type64='q' declared_type='NSInteger'/>
</method>
<method selector='vertices'>
<retval type='^{CGPoint=ff}' type64='^{CGPoint=dd}' declared_type='CGPoint*'/>
</method>
</class>
<class name='B2DQueryCallback'>
<method selector='queryCallback'>
<retval type='^i' declared_type='int*'/>
</method>
<method selector='reportFixture'>
<retval type='@?' function_pointer='true' declared_type='reportQueryFixtureCallback'>
<arg type='@' declared_type='B2DFixture*'/>
<retval type='B' declared_type='_Bool'/>
</retval>
</method>
<method selector='setQueryCallback:'>
<arg index='0' type='^i' name='queryCallback' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setReportFixture:'>
<arg index='0' type='@?' function_pointer='true' name='reportFixture' declared_type='reportQueryFixtureCallback'>
<arg type='@' declared_type='B2DFixture*'/>
<retval type='B' declared_type='_Bool'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='B2DRayCastCallback'>
<method selector='rayCastCallback'>
<retval type='^i' declared_type='int*'/>
</method>
<method selector='reportFixture'>
<retval type='@?' function_pointer='true' declared_type='reportRaycastFixtureCallback'>
<arg type='@' declared_type='B2DFixture*'/>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
<arg type='f' type64='d' declared_type='CGFloat'/>
<retval type='f' declared_type='float'/>
</retval>
</method>
<method selector='setRayCastCallback:'>
<arg index='0' type='^i' name='rayCastCallback' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setReportFixture:'>
<arg index='0' type='@?' function_pointer='true' name='reportFixture' declared_type='reportRaycastFixtureCallback'>
<arg type='@' declared_type='B2DFixture*'/>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
<arg type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
<arg type='f' type64='d' declared_type='CGFloat'/>
<retval type='f' declared_type='float'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='B2DShape'>
<method selector='childCount'>
<retval type='i' type64='q' declared_type='NSInteger'/>
</method>
<method selector='computeAABB:withTransform:andChildIndex:'>
<arg index='0' type='^{B2DAABB={CGPoint=ff}{CGPoint=ff}}' type64='^{B2DAABB={CGPoint=dd}{CGPoint=dd}}' name='aabb' declared_type='B2DAABB*'/>
<arg index='1' type='{B2DTransform={CGPoint=ff}f}' type64='{B2DTransform={CGPoint=dd}d}' name='transform' declared_type='B2DTransform'/>
<arg index='2' type='i' type64='q' name='childIndex' declared_type='NSInteger'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='computeMass:withDensity:'>
<arg index='0' type='^{B2DMassData=f{CGPoint=ff}f}' type64='^{B2DMassData=d{CGPoint=dd}d}' name='massData' declared_type='B2DMassData*'/>
<arg index='1' type='f' type64='d' name='density' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='initWithShape:'>
<arg index='0' type='@' name='boxShape' declared_type='id'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='radius'>
<retval type='f' type64='d' declared_type='CGFloat'/>
</method>
<method selector='rayCastWithOutput:input:transform:andChildren:'>
<arg index='0' type='^{B2DRayCastOutput={CGPoint=ff}f}' type64='^{B2DRayCastOutput={CGPoint=dd}d}' name='output' declared_type='B2DRayCastOutput*'/>
<arg index='1' type='{B2DRayCastInput={CGPoint=ff}{CGPoint=ff}f}' type64='{B2DRayCastInput={CGPoint=dd}{CGPoint=dd}d}' name='input' declared_type='B2DRayCastInput'/>
<arg index='2' type='{B2DTransform={CGPoint=ff}f}' type64='{B2DTransform={CGPoint=dd}d}' name='transform' declared_type='B2DTransform'/>
<arg index='3' type='i' type64='q' name='childIndex' declared_type='NSInteger'/>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='setShape:'>
<arg index='0' type='^i' name='shape' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='shape'>
<retval type='^i' declared_type='int*'/>
</method>
<method selector='testPointWithTransform:andPoint:'>
<arg index='0' type='{B2DTransform={CGPoint=ff}f}' type64='{B2DTransform={CGPoint=dd}d}' name='transform' declared_type='B2DTransform'/>
<arg index='1' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='point' declared_type='CGPoint'/>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='type'>
<retval type='i' declared_type='B2DShapeTypes'/>
</method>
</class>
<class name='B2DWorld'>
<method selector='addContactListener:'>
<arg index='0' type='@' name='contactListener' declared_type='B2DContactListener*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='allowsSleeping'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='autoClearForces'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='bodyCount'>
<retval type='i' type64='q' declared_type='NSInteger'/>
</method>
<method selector='bodyList'>
<retval type='@' declared_type='NSArray*'/>
</method>
<method selector='clearForces'>
<retval type='v' declared_type='void'/>
</method>
<method selector='contactCount'>
<retval type='i' type64='q' declared_type='NSInteger'/>
</method>
<method selector='continuousPhysics'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='createBody:'>
<arg index='0' type='{B2DBodyDef=i{CGPoint=ff}f{CGPoint=ff}fffBBBBBf}' type64='{B2DBodyDef=i{CGPoint=dd}d{CGPoint=dd}dddBBBBBd}' name='bodyDefinition' declared_type='B2DBodyDef'/>
<retval type='@' declared_type='B2DBody*'/>
</method>
<method selector='createBodyInPosition:type:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='position' declared_type='CGPoint'/>
<arg index='1' type='i' name='bodyType' declared_type='B2DBodyTypes'/>
<retval type='@' declared_type='B2DBody*'/>
</method>
<method selector='destroyBody:'>
<arg index='0' type='@' name='body' declared_type='B2DBody*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='drawDebugData'>
<retval type='v' declared_type='void'/>
</method>
<method selector='dump'>
<retval type='v' declared_type='void'/>
</method>
<method selector='gravity'>
<retval type='{CGPoint=ff}' type64='{CGPoint=dd}' declared_type='CGPoint'/>
</method>
<method selector='initWithWorld:'>
<arg index='0' type='@' name='boxWorld' declared_type='id'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='isLocked'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='jointCount'>
<retval type='i' type64='q' declared_type='NSInteger'/>
</method>
<method selector='profile'>
<retval type='{B2DProfile=ffffffff}' type64='{B2DProfile=dddddddd}' declared_type='B2DProfile'/>
</method>
<method selector='proxyCount'>
<retval type='i' type64='q' declared_type='NSInteger'/>
</method>
<method selector='queryAABBWithCallback:andAABB:'>
<arg index='0' type='@' name='queryCallback' declared_type='B2DQueryCallback*'/>
<arg index='1' type='{B2DAABB={CGPoint=ff}{CGPoint=ff}}' type64='{B2DAABB={CGPoint=dd}{CGPoint=dd}}' name='aabb' declared_type='B2DAABB'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='rayCastWithCallback:andPoint1:andPoint2:'>
<arg index='0' type='@' name='rayCastCallback' declared_type='B2DRayCastCallback*'/>
<arg index='1' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='point1' declared_type='CGPoint'/>
<arg index='2' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='point2' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeBody:'>
<arg index='0' type='@' name='body' declared_type='B2DBody*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAllowsSleeping:'>
<arg index='0' type='B' name='allowsSleeping' declared_type='_Bool'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAutoClearForces:'>
<arg index='0' type='B' name='autoClearForces' declared_type='_Bool'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setContactFilter:'>
<arg index='0' type='@' name='contactFilter' declared_type='B2DContactFilter*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setContactListener:'>
<arg index='0' type='@' name='contactListener' declared_type='B2DContactListener*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setContinuousPhysics:'>
<arg index='0' type='B' name='continuousPhysics' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDebugDraw:'>
<arg index='0' type='@' name='draw' declared_type='B2DDraw*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDestructionListener:'>
<arg index='0' type='@' name='destructionListener' declared_type='B2DDestructionListener*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setGravity:'>
<arg index='0' type='{CGPoint=ff}' type64='{CGPoint=dd}' name='gravity' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setWorld:'>
<arg index='0' type='^i' name='world' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='stepWithDelta:velocityInteractions:positionInteractions:'>
<arg index='0' type='f' type64='d' name='delta' declared_type='CGFloat'/>
<arg index='1' type='i' name='velocityInteractions' declared_type='int'/>
<arg index='2' type='i' name='positionInteractions' declared_type='int'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='treeBalance'>
<retval type='i' type64='q' declared_type='NSInteger'/>
</method>
<method selector='treeHeight'>
<retval type='i' type64='q' declared_type='NSInteger'/>
</method>
<method selector='treeQuality'>
<retval type='i' type64='q' declared_type='NSInteger'/>
</method>
<method selector='world'>
<retval type='^i' declared_type='int*'/>
</method>
</class>
</signatures>
