<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='B2DAABB' type='{B2DAABB=&quot;lowerBound&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;upperBound&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}' type64='{B2DAABB=&quot;lowerBound&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;upperBound&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}}'>
<field name='lowerBound' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field name='upperBound' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
</struct>
<struct name='B2DBodyDef' type='{B2DBodyDef=&quot;type&quot;i&quot;position&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;angle&quot;f&quot;linearVelocity&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;angularVelocity&quot;f&quot;linearDamping&quot;f&quot;angularDamping&quot;f&quot;allowSleep&quot;B&quot;awake&quot;B&quot;fixedRotation&quot;B&quot;bullet&quot;B&quot;active&quot;B&quot;gravityScale&quot;f}' type64='{B2DBodyDef=&quot;type&quot;i&quot;position&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;angle&quot;d&quot;linearVelocity&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;angularVelocity&quot;d&quot;linearDamping&quot;d&quot;angularDamping&quot;d&quot;allowSleep&quot;B&quot;awake&quot;B&quot;fixedRotation&quot;B&quot;bullet&quot;B&quot;active&quot;B&quot;gravityScale&quot;d}'>
<field name='type' declared_type='B2DBodyTypes' type='i'/>
<field name='position' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field name='angle' declared_type='CGFloat' type='f' type64='d'/>
<field name='linearVelocity' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field name='angularVelocity' declared_type='CGFloat' type='f' type64='d'/>
<field name='linearDamping' declared_type='CGFloat' type='f' type64='d'/>
<field name='angularDamping' declared_type='CGFloat' type='f' type64='d'/>
<field name='allowSleep' declared_type='_Bool' type='B'/>
<field name='awake' declared_type='_Bool' type='B'/>
<field name='fixedRotation' declared_type='_Bool' type='B'/>
<field name='bullet' declared_type='_Bool' type='B'/>
<field name='active' declared_type='_Bool' type='B'/>
<field name='gravityScale' declared_type='CGFloat' type='f' type64='d'/>
</struct>
<struct name='B2DFilter' type='{B2DFilter=&quot;categoryBits&quot;I&quot;maskBits&quot;I&quot;groupIndex&quot;i}' type64='{B2DFilter=&quot;categoryBits&quot;Q&quot;maskBits&quot;Q&quot;groupIndex&quot;q}'>
<field name='categoryBits' declared_type='NSUInteger' type='I' type64='Q'/>
<field name='maskBits' declared_type='NSUInteger' type='I' type64='Q'/>
<field name='groupIndex' declared_type='NSInteger' type='i' type64='q'/>
</struct>
<struct type64='{B2DFixtureDef=&quot;shape&quot;@&quot;userData&quot;@&quot;friction&quot;d&quot;restitution&quot;d&quot;density&quot;d&quot;isSensor&quot;B}' name='B2DFixtureDef' type='{B2DFixtureDef=&quot;shape&quot;@&quot;userData&quot;@&quot;friction&quot;f&quot;restitution&quot;f&quot;density&quot;f&quot;isSensor&quot;B}'>
<field name='shape' declared_type='B2DShape*' type='@'/>
<field name='userData' declared_type='id' type='@'/>
<field type64='d' name='friction' declared_type='CGFloat' type='f'/>
<field type64='d' name='restitution' declared_type='CGFloat' type='f'/>
<field type64='d' name='density' declared_type='CGFloat' type='f'/>
<field name='isSensor' declared_type='_Bool' type='B'/>
</struct>
<struct name='B2DMassData' type='{B2DMassData=&quot;mass&quot;f&quot;center&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;rotationalInertia&quot;f}' type64='{B2DMassData=&quot;mass&quot;d&quot;center&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;rotationalInertia&quot;d}'>
<field name='mass' declared_type='CGFloat' type='f' type64='d'/>
<field name='center' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field name='rotationalInertia' declared_type='CGFloat' type='f' type64='d'/>
</struct>
<struct name='B2DProfile' type='{B2DProfile=&quot;step&quot;f&quot;collide&quot;f&quot;solve&quot;f&quot;solveInit&quot;f&quot;solveVelocity&quot;f&quot;solvePosition&quot;f&quot;broadphase&quot;f&quot;solveTOI&quot;f}' type64='{B2DProfile=&quot;step&quot;d&quot;collide&quot;d&quot;solve&quot;d&quot;solveInit&quot;d&quot;solveVelocity&quot;d&quot;solvePosition&quot;d&quot;broadphase&quot;d&quot;solveTOI&quot;d}'>
<field name='step' declared_type='CGFloat' type='f' type64='d'/>
<field name='collide' declared_type='CGFloat' type='f' type64='d'/>
<field name='solve' declared_type='CGFloat' type='f' type64='d'/>
<field name='solveInit' declared_type='CGFloat' type='f' type64='d'/>
<field name='solveVelocity' declared_type='CGFloat' type='f' type64='d'/>
<field name='solvePosition' declared_type='CGFloat' type='f' type64='d'/>
<field name='broadphase' declared_type='CGFloat' type='f' type64='d'/>
<field name='solveTOI' declared_type='CGFloat' type='f' type64='d'/>
</struct>
<struct name='B2DRayCastInput' type='{B2DRayCastInput=&quot;point1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;point2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;maxFraction&quot;f}' type64='{B2DRayCastInput=&quot;point1&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;point2&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;maxFraction&quot;d}'>
<field name='point1' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field name='point2' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field name='maxFraction' declared_type='CGFloat' type='f' type64='d'/>
</struct>
<struct name='B2DRayCastOutput' type='{B2DRayCastOutput=&quot;normal&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;fraction&quot;f}' type64='{B2DRayCastOutput=&quot;normal&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;fraction&quot;d}'>
<field name='normal' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field name='fraction' declared_type='CGFloat' type='f' type64='d'/>
</struct>
<struct name='B2DTransform' type='{B2DTransform=&quot;position&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;angle&quot;f}' type64='{B2DTransform=&quot;position&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;angle&quot;d}'>
<field name='position' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field name='angle' declared_type='CGFloat' type='f' type64='d'/>
</struct>
<enum name='kChainShapeType' value='3'/>
<enum name='kCircleShapeType' value='0'/>
<enum name='kDynamicBodyType' value='2'/>
<enum name='kEdgeShapeType' value='1'/>
<enum name='kKinematicBodyType' value='1'/>
<enum name='kPolygonShapeType' value='2'/>
<enum name='kStaticBodyType' value='0'/>
<enum name='kTypeCountShapeType' value='4'/>
<function name='B2DAABBMake'>
<arg name='lowerBound' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg name='upperBound' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='B2DAABB' type='{B2DAABB={CGPoint=ff}{CGPoint=ff}}' type64='{B2DAABB={CGPoint=dd}{CGPoint=dd}}'/>
</function>
<function name='B2DBodyDefMake'>
<retval declared_type='B2DBodyDef' type='{B2DBodyDef=i{CGPoint=ff}f{CGPoint=ff}fffBBBBBf}' type64='{B2DBodyDef=i{CGPoint=dd}d{CGPoint=dd}dddBBBBBd}'/>
</function>
<function name='B2DFilterMake'>
<arg name='categoryBits' declared_type='NSUInteger' type='I' type64='Q'/>
<arg name='maskBits' declared_type='NSUInteger' type='I' type64='Q'/>
<arg name='groupIndex' declared_type='NSInteger' type='i' type64='q'/>
<retval declared_type='B2DFilter' type='{B2DFilter=IIi}' type64='{B2DFilter=QQq}'/>
</function>
<function name='B2DFixtureDefMake'>
<retval declared_type='B2DFixtureDef' type='{B2DFixtureDef=@@fffB}' type64='{B2DFixtureDef=@@dddB}'/>
</function>
<function name='B2DMassDataMake'>
<arg name='mass' declared_type='CGFloat' type='f' type64='d'/>
<arg name='center' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg name='rotationalInertia' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='B2DMassData' type='{B2DMassData=f{CGPoint=ff}f}' type64='{B2DMassData=d{CGPoint=dd}d}'/>
</function>
<function name='B2DProfileMake'>
<arg name='step' declared_type='CGFloat' type='f' type64='d'/>
<arg name='collide' declared_type='CGFloat' type='f' type64='d'/>
<arg name='solve' declared_type='CGFloat' type='f' type64='d'/>
<arg name='solveInit' declared_type='CGFloat' type='f' type64='d'/>
<arg name='solveVelocity' declared_type='CGFloat' type='f' type64='d'/>
<arg name='solvePosition' declared_type='CGFloat' type='f' type64='d'/>
<arg name='broadphase' declared_type='CGFloat' type='f' type64='d'/>
<arg name='solveTOI' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='B2DProfile' type='{B2DProfile=ffffffff}' type64='{B2DProfile=dddddddd}'/>
</function>
<function name='B2DRayCastInputMake'>
<arg name='point1' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg name='point2' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg name='maxFraction' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='B2DRayCastInput' type='{B2DRayCastInput={CGPoint=ff}{CGPoint=ff}f}' type64='{B2DRayCastInput={CGPoint=dd}{CGPoint=dd}d}'/>
</function>
<function name='B2DRayCastOutputMake'>
<arg name='normal' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg name='fraction' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='B2DRayCastOutput' type='{B2DRayCastOutput={CGPoint=ff}f}' type64='{B2DRayCastOutput={CGPoint=dd}d}'/>
</function>
<function name='B2DTransformMake'>
<arg name='position' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg name='angle' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='B2DTransform' type='{B2DTransform={CGPoint=ff}f}' type64='{B2DTransform={CGPoint=dd}d}'/>
</function>
<class name='B2DBody'>
<method selector='addFixtureForShape:friction:restitution:density:isSensor:'>
<arg name='shape' index='0' declared_type='B2DShape*' type='@'/>
<arg name='friction' index='1' declared_type='CGFloat' type='f' type64='d'/>
<arg name='restitution' index='2' declared_type='CGFloat' type='f' type64='d'/>
<arg name='density' index='3' declared_type='CGFloat' type='f' type64='d'/>
<arg name='isSensor' index='4' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='angle'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='angularDamping'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='angularVelocity'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='applyAngularImpulse:'>
<arg name='impulse' index='0' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applyForce:atLocation:asImpulse:'>
<arg name='force' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg name='location' index='1' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg name='asImpulse' index='2' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applyForce:atPoint:'>
<arg name='force' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg name='point' index='1' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applyForceToCenter:'>
<arg name='force' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applyLinearImpulse:atPoint:'>
<arg name='impulse' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg name='point' index='1' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applyTorque:'>
<arg name='torque' index='0' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applyTorque:asImpulse:'>
<arg name='torque' index='0' declared_type='CGFloat' type='f' type64='d'/>
<arg name='impulse' index='1' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='awake'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='body'>
<retval declared_type='int*' type='^i'/>
</method>
<method selector='bullet'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='center'>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='createFixture:'>
<arg name='fixtureDefinition' index='0' declared_type='B2DFixtureDef' type='{B2DFixtureDef=@@fffB}' type64='{B2DFixtureDef=@@dddB}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='createFixtureWithShape:andDensity:'>
<arg name='shape' index='0' declared_type='B2DShape*' type='@'/>
<arg name='density' index='1' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='destroyFixture:'>
<arg name='fixture' index='0' declared_type='B2DFixture*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='dump'>
<retval declared_type='void' type='v'/>
</method>
<method selector='fixedRotation'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='fixtureList'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='gravityScale'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='inertia'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='initWithBody:'>
<arg name='boxBody' index='0' declared_type='id' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isActive'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='isAwake'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='isBullet'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='isEqualToBody:'>
<arg name='aBody' index='0' declared_type='B2DBody*' type='@'/>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='isFixedRotation'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='isSleepingAllowed'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='linearDamping'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='linearVelocity'>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='linearVelocityFromLocalPoint:'>
<arg name='localPoint' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='linearVelocityFromWorldPoint:'>
<arg name='worldPoint' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='localCenter'>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='localPoint:'>
<arg name='worldPoint' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='localVector:'>
<arg name='worldVector' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='mass'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='massData'>
<retval declared_type='B2DMassData' type='{B2DMassData=f{CGPoint=ff}f}' type64='{B2DMassData=d{CGPoint=dd}d}'/>
</method>
<method selector='next'>
<retval declared_type='B2DBody*' type='@'/>
</method>
<method selector='position'>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='resetMassData'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAngularDamping:'>
<arg name='angularDamping' index='0' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAngularVelocity:'>
<arg name='angularVelocity' index='0' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAwake:'>
<arg name='awake' index='0' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBody:'>
<arg name='body' index='0' declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBullet:'>
<arg name='bullet' index='0' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFixedRotation:'>
<arg name='fixedRotation' index='0' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGravityScale:'>
<arg name='gravityScale' index='0' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLinearDamping:'>
<arg name='linearDamping' index='0' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLinearVelocity:'>
<arg name='linearVelocity' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMassData:'>
<arg name='massData' index='0' declared_type='B2DMassData' type='{B2DMassData=f{CGPoint=ff}f}' type64='{B2DMassData=d{CGPoint=dd}d}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPosition:'>
<arg name='position' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSleepingAllowed:'>
<arg name='sleepingAllowed' index='0' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTransformWithPosition:andAngle:'>
<arg name='position' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg name='angle' index='1' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setType:'>
<arg name='type' index='0' declared_type='B2DBodyTypes' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUserData:'>
<arg name='userData' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sleepingAllowed'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='transform'>
<retval declared_type='B2DTransform' type='{B2DTransform={CGPoint=ff}f}' type64='{B2DTransform={CGPoint=dd}d}'/>
</method>
<method selector='type'>
<retval declared_type='B2DBodyTypes' type='i'/>
</method>
<method selector='userData'>
<retval declared_type='id' type='@'/>
</method>
<method selector='worldCenter'>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='worldPoint:'>
<arg name='localPoint' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='worldVector:'>
<arg name='localVector' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
</class>
<class name='B2DChainShape'>
<method selector='createChainWithVertices:andVertexCount:'>
<arg name='vertices' index='0' declared_type='CGPoint*' type='^{CGPoint=ff}' type64='^{CGPoint=dd}'/>
<arg name='vertexCount' index='1' declared_type='NSInteger' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='createLoopWithVertices:andVertexCount:'>
<arg name='vertices' index='0' declared_type='CGPoint*' type='^{CGPoint=ff}' type64='^{CGPoint=dd}'/>
<arg name='vertexCount' index='1' declared_type='NSInteger' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getChildEdge:withIndex:'>
<arg name='edgeShape' index='0' declared_type='B2DEdgeShape*' type='@'/>
<arg name='index' index='1' declared_type='NSInteger' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='hasNextVertex'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='hasPreviousVertex'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='nextVertex'>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='previousVertex'>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='setNextVertex:'>
<arg name='vertex' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPreviousVertex:'>
<arg name='vertex' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='vertexCount'>
<retval declared_type='NSInteger' type='i' type64='q'/>
</method>
<method selector='vertices'>
<retval declared_type='CGPoint*' type='^{CGPoint=ff}' type64='^{CGPoint=dd}'/>
</method>
</class>
<class name='B2DCircleShape'>
<method selector='getSupport:'>
<arg name='direction' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='NSInteger' type='i' type64='q'/>
</method>
<method selector='getSupportVertex:'>
<arg name='direction' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='getVertex:'>
<arg name='index' index='0' declared_type='NSInteger' type='i' type64='q'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='initWithRadius:'>
<arg name='radius' index='0' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='position'>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='vertexCount'>
<retval declared_type='NSInteger' type='i' type64='q'/>
</method>
</class>
<class name='B2DContactFilter'>
<method selector='contactFilter'>
<retval declared_type='int*' type='^i'/>
</method>
<method selector='setContactFilter:'>
<arg name='contactFilter' index='0' declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShouldCollide:'>
<arg name='shouldCollide' index='0' declared_type='shouldCollideCallback' function_pointer='true' type='@?'>
<arg declared_type='B2DFixture*' type='@'/>
<arg declared_type='B2DFixture*' type='@'/>
<retval declared_type='_Bool' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldCollide'>
<retval declared_type='shouldCollideCallback' function_pointer='true' type='@?'>
<arg declared_type='B2DFixture*' type='@'/>
<arg declared_type='B2DFixture*' type='@'/>
<retval declared_type='_Bool' type='B'/>
</retval>
</method>
</class>
<class name='B2DContactListener'>
<method selector='beginContact'>
<retval declared_type='beginContactCallback' function_pointer='true' type='@?'>
<arg declared_type='B2DBody*' type='@'/>
<arg declared_type='B2DBody*' type='@'/>
<arg declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</retval>
</method>
<method selector='contactListener'>
<retval declared_type='int*' type='^i'/>
</method>
<method selector='endContact'>
<retval declared_type='endContactCallback' function_pointer='true' type='@?'>
<arg declared_type='B2DBody*' type='@'/>
<arg declared_type='B2DBody*' type='@'/>
<retval declared_type='void' type='v'/>
</retval>
</method>
<method selector='setBeginContact:'>
<arg name='beginContact' index='0' declared_type='beginContactCallback' function_pointer='true' type='@?'>
<arg declared_type='B2DBody*' type='@'/>
<arg declared_type='B2DBody*' type='@'/>
<arg declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContactListener:'>
<arg name='contactListener' index='0' declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEndContact:'>
<arg name='endContact' index='0' declared_type='endContactCallback' function_pointer='true' type='@?'>
<arg declared_type='B2DBody*' type='@'/>
<arg declared_type='B2DBody*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='B2DDestructionListener'>
<method selector='destructionListener'>
<retval declared_type='int*' type='^i'/>
</method>
<method selector='fixtureSayGoodbye'>
<retval declared_type='fixtureSayGoodbyeCallback' function_pointer='true' type='@?'>
<arg declared_type='B2DFixture*' type='@'/>
<retval declared_type='void' type='v'/>
</retval>
</method>
<method selector='setDestructionListener:'>
<arg name='destructionListener' index='0' declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFixtureSayGoodbye:'>
<arg name='fixtureSayGoodbye' index='0' declared_type='fixtureSayGoodbyeCallback' function_pointer='true' type='@?'>
<arg declared_type='B2DFixture*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='B2DEdgeShape'>
<method selector='endAdjacentVertex'>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='endVertex'>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='hasEndAdjacentVertex'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='hasStartAdjacentVertex'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='initWithStartPoint:endPoint:'>
<arg name='startPoint' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg name='endPoint' index='1' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithStartVertex:endVertex:'>
<arg name='startVertex' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg name='endVertex' index='1' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='startAdjacentVertex'>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='startVertex'>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
</class>
<class name='B2DFixture'>
<method selector='aabb:'>
<arg name='childIndex' index='0' declared_type='NSInteger' type='i' type64='q'/>
<retval declared_type='B2DAABB' type='{B2DAABB={CGPoint=ff}{CGPoint=ff}}' type64='{B2DAABB={CGPoint=dd}{CGPoint=dd}}'/>
</method>
<method selector='body'>
<retval declared_type='B2DBody*' type='@'/>
</method>
<method selector='density'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='dump:'>
<arg name='bodyIndex' index='0' declared_type='NSInteger' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='filterData'>
<retval declared_type='B2DFilter' type='{B2DFilter=IIi}' type64='{B2DFilter=QQq}'/>
</method>
<method selector='fixture'>
<retval declared_type='int*' type='^i'/>
</method>
<method selector='friction'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='initWithFixture:'>
<arg name='boxFixture' index='0' declared_type='id' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isSensor'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='massData'>
<retval declared_type='B2DMassData' type='{B2DMassData=f{CGPoint=ff}f}' type64='{B2DMassData=d{CGPoint=dd}d}'/>
</method>
<method selector='next'>
<retval declared_type='B2DFixture*' type='@'/>
</method>
<method selector='rayCastWithOutput:input:andChildIndex:'>
<arg name='output' index='0' declared_type='B2DRayCastOutput*' type='^{B2DRayCastOutput={CGPoint=ff}f}' type64='^{B2DRayCastOutput={CGPoint=dd}d}'/>
<arg name='input' index='1' declared_type='B2DRayCastInput' type='{B2DRayCastInput={CGPoint=ff}{CGPoint=ff}f}' type64='{B2DRayCastInput={CGPoint=dd}{CGPoint=dd}d}'/>
<arg name='childIndex' index='2' declared_type='NSInteger' type='i' type64='q'/>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='refilter'>
<retval declared_type='void' type='v'/>
</method>
<method selector='restitution'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='sensor'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='setDensity:'>
<arg name='density' index='0' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFilterData:'>
<arg name='filterData' index='0' declared_type='B2DFilter' type='{B2DFilter=IIi}' type64='{B2DFilter=QQq}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFixture:'>
<arg name='fixture' index='0' declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFriction:'>
<arg name='friction' index='0' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRestitution:'>
<arg name='restitution' index='0' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSensor:'>
<arg name='sensor' index='0' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUserData:'>
<arg name='userData' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shape'>
<retval declared_type='B2DShape*' type='@'/>
</method>
<method selector='testPoint:'>
<arg name='point' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='type'>
<retval declared_type='B2DShapeTypes' type='i'/>
</method>
<method selector='userData'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='B2DPolygonShape'>
<method selector='centroid'>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='getVertex:'>
<arg name='index' index='0' declared_type='NSInteger' type='i' type64='q'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='initWithBoxSize:'>
<arg name='boxSize' index='0' declared_type='CGSize' type='{CGSize=ff}' type64='{CGSize=dd}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithHalfWidth:andHalfHeight:'>
<arg name='halfWidth' index='0' declared_type='CGFloat' type='f' type64='d'/>
<arg name='halfHeight' index='1' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithHalfWidth:halfHeight:center:andAngle:'>
<arg name='halfWidth' index='0' declared_type='CGFloat' type='f' type64='d'/>
<arg name='halfHeight' index='1' declared_type='CGFloat' type='f' type64='d'/>
<arg name='center' index='2' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg name='angle' index='3' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithVertices:andVertexCount:'>
<arg name='vertices' index='0' declared_type='CGPoint*' type='^{CGPoint=ff}' type64='^{CGPoint=dd}'/>
<arg name='vertexCount' index='1' declared_type='NSInteger' type='i' type64='q'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='normals'>
<retval declared_type='CGPoint*' type='^{CGPoint=ff}' type64='^{CGPoint=dd}'/>
</method>
<method selector='vertexCount'>
<retval declared_type='NSInteger' type='i' type64='q'/>
</method>
<method selector='vertices'>
<retval declared_type='CGPoint*' type='^{CGPoint=ff}' type64='^{CGPoint=dd}'/>
</method>
</class>
<class name='B2DQueryCallback'>
<method selector='queryCallback'>
<retval declared_type='int*' type='^i'/>
</method>
<method selector='reportFixture'>
<retval declared_type='reportQueryFixtureCallback' function_pointer='true' type='@?'>
<arg declared_type='B2DFixture*' type='@'/>
<retval declared_type='_Bool' type='B'/>
</retval>
</method>
<method selector='setQueryCallback:'>
<arg name='queryCallback' index='0' declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setReportFixture:'>
<arg name='reportFixture' index='0' declared_type='reportQueryFixtureCallback' function_pointer='true' type='@?'>
<arg declared_type='B2DFixture*' type='@'/>
<retval declared_type='_Bool' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='B2DRayCastCallback'>
<method selector='rayCastCallback'>
<retval declared_type='int*' type='^i'/>
</method>
<method selector='reportFixture'>
<retval declared_type='reportRaycastFixtureCallback' function_pointer='true' type='@?'>
<arg declared_type='B2DFixture*' type='@'/>
<arg declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='float' type='f'/>
</retval>
</method>
<method selector='setRayCastCallback:'>
<arg name='rayCastCallback' index='0' declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setReportFixture:'>
<arg name='reportFixture' index='0' declared_type='reportRaycastFixtureCallback' function_pointer='true' type='@?'>
<arg declared_type='B2DFixture*' type='@'/>
<arg declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='float' type='f'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='B2DShape'>
<method selector='childCount'>
<retval declared_type='NSInteger' type='i' type64='q'/>
</method>
<method selector='computeAABB:withTransform:andChildIndex:'>
<arg name='aabb' index='0' declared_type='B2DAABB*' type='^{B2DAABB={CGPoint=ff}{CGPoint=ff}}' type64='^{B2DAABB={CGPoint=dd}{CGPoint=dd}}'/>
<arg name='transform' index='1' declared_type='B2DTransform' type='{B2DTransform={CGPoint=ff}f}' type64='{B2DTransform={CGPoint=dd}d}'/>
<arg name='childIndex' index='2' declared_type='NSInteger' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='computeMass:withDensity:'>
<arg name='massData' index='0' declared_type='B2DMassData*' type='^{B2DMassData=f{CGPoint=ff}f}' type64='^{B2DMassData=d{CGPoint=dd}d}'/>
<arg name='density' index='1' declared_type='CGFloat' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithShape:'>
<arg name='boxShape' index='0' declared_type='id' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='radius'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='rayCastWithOutput:input:transform:andChildren:'>
<arg name='output' index='0' declared_type='B2DRayCastOutput*' type='^{B2DRayCastOutput={CGPoint=ff}f}' type64='^{B2DRayCastOutput={CGPoint=dd}d}'/>
<arg name='input' index='1' declared_type='B2DRayCastInput' type='{B2DRayCastInput={CGPoint=ff}{CGPoint=ff}f}' type64='{B2DRayCastInput={CGPoint=dd}{CGPoint=dd}d}'/>
<arg name='transform' index='2' declared_type='B2DTransform' type='{B2DTransform={CGPoint=ff}f}' type64='{B2DTransform={CGPoint=dd}d}'/>
<arg name='childIndex' index='3' declared_type='NSInteger' type='i' type64='q'/>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='setShape:'>
<arg name='shape' index='0' declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shape'>
<retval declared_type='int*' type='^i'/>
</method>
<method selector='testPointWithTransform:andPoint:'>
<arg name='transform' index='0' declared_type='B2DTransform' type='{B2DTransform={CGPoint=ff}f}' type64='{B2DTransform={CGPoint=dd}d}'/>
<arg name='point' index='1' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='type'>
<retval declared_type='B2DShapeTypes' type='i'/>
</method>
</class>
<class name='B2DWorld'>
<method selector='addContactListener:'>
<arg name='contactListener' index='0' declared_type='B2DContactListener*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='allowsSleeping'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='autoClearForces'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='bodyCount'>
<retval declared_type='NSInteger' type='i' type64='q'/>
</method>
<method selector='bodyList'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='clearForces'>
<retval declared_type='void' type='v'/>
</method>
<method selector='contactCount'>
<retval declared_type='NSInteger' type='i' type64='q'/>
</method>
<method selector='continuousPhysics'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='createBody:'>
<arg name='bodyDefinition' index='0' declared_type='B2DBodyDef' type='{B2DBodyDef=i{CGPoint=ff}f{CGPoint=ff}fffBBBBBf}' type64='{B2DBodyDef=i{CGPoint=dd}d{CGPoint=dd}dddBBBBBd}'/>
<retval declared_type='B2DBody*' type='@'/>
</method>
<method selector='createBodyInPosition:type:'>
<arg name='position' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg name='bodyType' index='1' declared_type='B2DBodyTypes' type='i'/>
<retval declared_type='B2DBody*' type='@'/>
</method>
<method selector='destroyBody:'>
<arg name='body' index='0' declared_type='B2DBody*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='dump'>
<retval declared_type='void' type='v'/>
</method>
<method selector='gravity'>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='initWithWorld:'>
<arg name='boxWorld' index='0' declared_type='id' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isLocked'>
<retval declared_type='_Bool' type='B'/>
</method>
<method selector='jointCount'>
<retval declared_type='NSInteger' type='i' type64='q'/>
</method>
<method selector='profile'>
<retval declared_type='B2DProfile' type='{B2DProfile=ffffffff}' type64='{B2DProfile=dddddddd}'/>
</method>
<method selector='proxyCount'>
<retval declared_type='NSInteger' type='i' type64='q'/>
</method>
<method selector='queryAABBWithCallback:andAABB:'>
<arg name='queryCallback' index='0' declared_type='B2DQueryCallback*' type='@'/>
<arg name='aabb' index='1' declared_type='B2DAABB' type='{B2DAABB={CGPoint=ff}{CGPoint=ff}}' type64='{B2DAABB={CGPoint=dd}{CGPoint=dd}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rayCastWithCallback:andPoint1:andPoint2:'>
<arg name='rayCastCallback' index='0' declared_type='B2DRayCastCallback*' type='@'/>
<arg name='point1' index='1' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg name='point2' index='2' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeBody:'>
<arg name='body' index='0' declared_type='B2DBody*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsSleeping:'>
<arg name='allowsSleeping' index='0' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutoClearForces:'>
<arg name='autoClearForces' index='0' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContactFilter:'>
<arg name='contactFilter' index='0' declared_type='B2DContactFilter*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContactListener:'>
<arg name='contactListener' index='0' declared_type='B2DContactListener*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContinuousPhysics:'>
<arg name='continuousPhysics' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDestructionListener:'>
<arg name='destructionListener' index='0' declared_type='B2DDestructionListener*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGravity:'>
<arg name='gravity' index='0' declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWorld:'>
<arg name='world' index='0' declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stepWithDelta:velocityInteractions:positionInteractions:'>
<arg name='delta' index='0' declared_type='CGFloat' type='f' type64='d'/>
<arg name='velocityInteractions' index='1' declared_type='int' type='i'/>
<arg name='positionInteractions' index='2' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='treeBalance'>
<retval declared_type='NSInteger' type='i' type64='q'/>
</method>
<method selector='treeHeight'>
<retval declared_type='NSInteger' type='i' type64='q'/>
</method>
<method selector='treeQuality'>
<retval declared_type='NSInteger' type='i' type64='q'/>
</method>
<method selector='world'>
<retval declared_type='int*' type='^i'/>
</method>
</class>
</signatures>
